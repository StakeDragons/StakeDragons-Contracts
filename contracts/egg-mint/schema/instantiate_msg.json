{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base",
    "base_price",
    "size"
  ],
  "properties": {
    "base": {
      "$ref": "#/definitions/InstantiateMsg"
    },
    "base_price": {
      "$ref": "#/definitions/Uint64"
    },
    "size": {
      "$ref": "#/definitions/Uint64"
    }
  },
  "definitions": {
    "InstantiateMsg": {
      "type": "object",
      "required": [
        "minter",
        "name",
        "symbol"
      ],
      "properties": {
        "minter": {
          "description": "The minter is the only one who can create new NFTs. This is designed for a base NFT that is controlled by an external program or contract. You will likely replace this with custom logic in custom NFTs",
          "type": "string"
        },
        "name": {
          "description": "Name of the NFT contract",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the NFT contract",
          "type": "string"
        }
      }
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
